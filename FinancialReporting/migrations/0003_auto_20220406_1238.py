# Generated by Django 3.2.9 on 2022-04-06 10:38

from django.db import migrations, models
import django.db.models.deletion


def sync_personnel_cost(apps, schema_editor):
     PersonnelCost = apps.get_model('FinancialReporting', 'PersonnelCost')
     Researcher = apps.get_model('Projects', 'Researcher')

     for pc in PersonnelCost.objects.all():
         try:
             r = Researcher.objects.get(name=pc.researcher.name, surname=pc.researcher.surname)
             pc.n_researcher = r
             pc.save()
         except Researcher.NotFound:
             print("Failed to match researcher for cost with id", pc.pk)


def sync_presence_data(apps, schema_editor):
     PresenceData = apps.get_model('FinancialReporting', 'PresenceData')
     Researcher = apps.get_model('Projects', 'Researcher')

     for pd in PresenceData.objects.all():
         try:
             r = Researcher.objects.get(name=pd.researcher.name, surname=pd.researcher.surname)
             pd.n_researcher = r
             pd.save()
         except Researcher.NotFound:
             print("Failed to match researcher for cost with id", pd.pk)


def sync_reporting(apps, schema_editor):
    Reporting = apps.get_model('FinancialReporting', 'Reporting')
    Researcher = apps.get_model('Projects', 'Researcher')
    Project = apps.get_model('Projects', 'Project')
    WorkPackage = apps.get_model('Projects', 'WorkPackage')

    for period in Reporting.objects.all():
        try:
            r = Researcher.objects.get(name=period.researcher.name, surname=period.researcher.surname)
            period.n_researcher = r
        except Researcher.NotFound:
            print("Failed to match researcher for cost with id", period.pk)

        try:
            prj = Project.objects.get(name=period.project.name)
            period.n_project = prj
        except Project.NotFound:
            print("Failed to match project for cost with id", period.pk)

        try:
            if period.wp and prj:
                wp = WorkPackage.objects.get(project=prj, name=period.wp.name)
                period.n_wp = wp
        except WorkPackage.NotFound:
            print("Failed to match work package for cost with id", period.pk)

        period.save()


class Migration(migrations.Migration):

    dependencies = [
        ('Projects', '0002_copy_data'),
        ('FinancialReporting', '0002_auto_20220301_2009'),
        ('Projects', '0002_copy_data'),
    ]

    operations = [
        migrations.AddField(
            model_name='personnelcost',
            name='n_researcher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Projects.researcher'),
        ),
        migrations.AddField(
            model_name='presencedata',
            name='n_researcher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Projects.researcher'),
        ),
        migrations.AddField(
            model_name='reporting',
            name='n_project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Projects.project'),
        ),
        migrations.AddField(
            model_name='reporting',
            name='n_researcher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Projects.researcher'),
        ),
        migrations.AddField(
            model_name='reporting',
            name='n_wp',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Projects.workpackage'),
        ),
        migrations.RunPython(sync_personnel_cost),
        migrations.RunPython(sync_presence_data),
        migrations.RunPython(sync_reporting),
    ]
