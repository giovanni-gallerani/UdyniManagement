# Generated by Django 4.0.4 on 2022-07-07 14:04

from django.db import migrations
import FinancialReporting.models as oldModels
import Reporting.models as newModels
import calendar
import datetime
from django.db.models import Q
from django.db import OperationalError



def migrate_data_from_old_reporting(apps, schema_editor):
    # Migrate timesheet data from old FinancialReporting app

    # Ask user for confirmation
    ans = input("\nThis operation will reset the database for app 'Reporting'. Are you sure? (type 'yes' to confirm!):")
    if ans.strip() != 'yes':
        raise OperationalError("Aborted")

    # Clean up
    newModels.EpasCode.objects.all().delete()
    newModels.BankHoliday.objects.all().delete()
    newModels.PersonnelCost.objects.all().delete()
    newModels.PresenceData.objects.all().delete()
    newModels.ReportingPeriod.objects.all().delete()
    newModels.ReportedWork.objects.all().delete()
    newModels.ReportedWorkWorkpackage.objects.all().delete()
    newModels.ReportedMission.objects.all().delete()
    newModels.TimesheetHours.objects.all().delete()

    # Migrate EPAS codes
    print("Migrating EPAS codes...")
    for code in oldModels.EpasCode.objects.all():
        new_code = newModels.EpasCode()
        new_code.code = code.code
        new_code.ts_code = code.ts_code
        new_code.description = code.description
        new_code.save()

    # Migrate holidays
    print("Migrating bank holidays...")
    for h in oldModels.BankHoliday.objects.all():
        nh = newModels.BankHoliday()
        nh.name = h.name
        nh.day = h.day
        nh.month = h.month
        nh.year = h.year
        nh.save()

    # Migrate personnel costs
    print("Migrating personnel costs...")
    for cost in oldModels.PersonnelCost.objects.all():
        new_cost = newModels.PersonnelCost()
        new_cost.researcher = cost.researcher
        new_cost.year = cost.year
        new_cost.cost = cost.cost
        new_cost.save()

    # Migrate presence data
    print("Migrating presence data...")
    for p in oldModels.PresenceData.objects.all():
        new_p = newModels.PresenceData()
        new_p.researcher = p.researcher
        new_p.day = p.day
        new_p.hours = p.hours
        new_p.code = newModels.EpasCode.objects.get(code=p.code.code) if p.code is not None else None
        new_p.ts_code = p.ts_code
        new_p.save()

    # Migrate reporting periods
    print("Migrating reporting periods...")
    tot = oldModels.Reporting.objects.count()
    for i, rp in enumerate(oldModels.Reporting.objects.all()):
        print("[{0:d}/{1:d}] Migrating reporting period {2!s}".format(i+1, tot, rp))
        # Get linked entities
        hints = rp.timesheethint_set
        hours = rp.timesheethours_set
        missions = rp.timesheetmissionhint_set

        # Check if we already created the reporting period
        try:
            new_period = newModels.ReportingPeriod.objects.get(project=rp.project, rp_start=rp.rp_start, rp_end=rp.rp_end)

        except newModels.ReportingPeriod.DoesNotExist:
            new_period = newModels.ReportingPeriod()
            new_period.project = rp.project
            new_period.rp_start = rp.rp_start
            new_period.rp_end = rp.rp_end
            new_period.save()

        # Add all hints as worked hours
        for h in hints.all():
            # Get or create reported work object
            try:
                work = newModels.ReportedWork.objects.get(period=new_period, researcher=rp.researcher, year=h.year, month=h.month)

            except newModels.ReportedWork.DoesNotExist:
                work = newModels.ReportedWork()
                work.period = new_period
                work.researcher = rp.researcher
                work.year = h.year
                work.month = h.month
                work.hours = 0.0
                work.save()

            # Add hours
            work.hours += h.hours
            work.save()

            # Add WP if any
            if rp.wp is not None:
                new_wp = newModels.ReportedWorkWorkpackage()
                new_wp.report = work
                new_wp.workpackage = rp.wp
                new_wp.fraction = h.hours
                new_wp.save()
            else:
                new_wp = None

            # Add hours for the current month/year
            f = Q(day__gte=datetime.date(year=h.year, month=h.month, day=1)) & Q(day__lte=datetime.date(year=h.year, month=h.month, day=calendar.monthrange(h.year, h.month)[1]))
            for tsh in hours.filter(f):
                ntsh = newModels.TimesheetHours()
                ntsh.report = work
                ntsh.report_wp = new_wp
                ntsh.day = tsh.day
                ntsh.hours = tsh.hours
                ntsh.save()

        # Add missions
        for m in missions.all():
            nm = newModels.ReportedMission()
            nm.researcher = rp.researcher
            nm.workpackage = rp.wp
            nm.period = new_period
            nm.day = m.missionday.day
            nm.save()


class Migration(migrations.Migration):

    dependencies = [
        ('Reporting', '0002_reportedmission_workpackage'),
    ]

    operations = [
        migrations.RunPython(migrate_data_from_old_reporting),
    ]
